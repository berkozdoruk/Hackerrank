#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define SIZE 50


char *readline();

char **split_string(char *);

enum record_status{
    EMPTY,DELETED,OCCUPIED
};
typedef struct{
    char word[SIZE];
    enum record_status status;
}hash_t;
int hashfunc(int key)
{
    return(key%SIZE);
}
void insert(hash_t table, char *word)
{
    int count,temp,key;
    key=word;
    temp=hashfunc(key);
    for(count=1;count!=SIZE-1;count++)
    {
        if(hash_t[pos].status==EMPTY || hash_t[pos].status==DELETED)
        {
            
        }
    }
    
}    

int search(hash_t param, char *string)
{
    int count,temp,pos;
    temp=hashfunc(string);
    pos=temp;
    for(count=1;count!=SIZE-1;count++)
    {
    if(strcmp(param,string)!=0)
        return -1;
    if (strcmp(param,string)==0)
        return pos;
        pos=(temp+count)%SIZE;
    }
    return -1;
}

void delete(hash_t param, int i)
{
    
}

// Complete the checkMagazine function below.
bool checkMagazine(int magazine_count, char **magazine, int note_count, char **note) {

    hash_t table = NULL;
    for (int i = 0; i < magazine_count; ++i) {
        insert(table, magazine[i]);
    }
    for (int j = 0; j < note_count; ++j) {
        int found = search(table, note[j]);
        if (found > -1) {
            delete(table, found);
        } else {
            return false;
        }
    }
    return true;
}

int main() {
    char **mn = split_string(readline());

    char *m_endptr;
    char *m_str = mn[0];
    int m = strtol(m_str, &m_endptr, 10);

    if (m_endptr == m_str || *m_endptr != '\0') { exit(EXIT_FAILURE); }

    char *n_endptr;
    char *n_str = mn[1];
    int n = strtol(n_str, &n_endptr, 10);

    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }

    char **magazine_temp = split_string(readline());

    char **magazine = malloc(m * sizeof(char *));

    for (int i = 0; i < m; i++) {
        char *magazine_item = *(magazine_temp + i);

        *(magazine + i) = magazine_item;
    }

    int magazine_count = m;

    char **note_temp = split_string(readline());

    char **note = malloc(n * sizeof(char *));

    for (int i = 0; i < n; i++) {
        char *note_item = *(note_temp + i);

        *(note + i) = note_item;
    }

    int note_count = n;

    checkMagazine(magazine_count, magazine, note_count, note);

    return 0;
}

char *readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char *data = malloc(alloc_length);

    while (true) {
        char *cursor = data + data_length;
        char *line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!line) {
            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);

        data[data_length] = '\0';
    }

    return data;
}

char **split_string(char *str) {
    char **splits = NULL;
    char *token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char *) * ++spaces);

        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}
